package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Jasmeet-1998/Microservices/intermediate-go-microservices/graphql_mongodb_go/graph/model"
)

// CreateDonutHub is the resolver for the createDonutHub field.
func (r *mutationResolver) CreateDonutHub(ctx context.Context, input model.CreateDonutHubInput) (*model.DonutHub, error) {
	panic(fmt.Errorf("not implemented: CreateDonutHub - createDonutHub"))
}

// UpdateDonutHub is the resolver for the updateDonutHub field.
func (r *mutationResolver) UpdateDonutHub(ctx context.Context, id string, input model.UpdateDonutHubInput) (*model.DonutHub, error) {
	panic(fmt.Errorf("not implemented: UpdateDonutHub - updateDonutHub"))
}

// DeleteDonutHub is the resolver for the deleteDonutHub field.
func (r *mutationResolver) DeleteDonutHub(ctx context.Context, id string) (*model.DeleteDonutHubResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteDonutHub - deleteDonutHub"))
}

// Hubs is the resolver for the hubs field.
func (r *queryResolver) Hubs(ctx context.Context) ([]*model.DonutHub, error) {
	panic(fmt.Errorf("not implemented: Hubs - hubs"))
}

// Hub is the resolver for the hub field.
func (r *queryResolver) Hub(ctx context.Context, id string) (*model.DonutHub, error) {
	panic(fmt.Errorf("not implemented: Hub - hub"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
