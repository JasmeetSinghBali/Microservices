// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	// Unary i.e simple request-response
	SayHi(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HiResponse, error)
	// ServerStreaming
	SayHiServerStreaming(ctx context.Context, in *DonutsList, opts ...grpc.CallOption) (GreetService_SayHiServerStreamingClient, error)
	// ClientStreaming
	SayHiClientsStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiClientsStreamingClient, error)
	// BidirectionalStreaming
	SayHiBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiBidirectionalStreamingClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) SayHi(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*HiResponse, error) {
	out := new(HiResponse)
	err := c.cc.Invoke(ctx, "/greet_service.GreetService/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) SayHiServerStreaming(ctx context.Context, in *DonutsList, opts ...grpc.CallOption) (GreetService_SayHiServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet_service.GreetService/SayHiServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_SayHiServerStreamingClient interface {
	Recv() (*HiResponse, error)
	grpc.ClientStream
}

type greetServiceSayHiServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiServerStreamingClient) Recv() (*HiResponse, error) {
	m := new(HiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayHiClientsStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiClientsStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet_service.GreetService/SayHiClientsStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiClientsStreamingClient{stream}
	return x, nil
}

type GreetService_SayHiClientsStreamingClient interface {
	Send(*StreamingRequest) error
	CloseAndRecv() (*MessagesList, error)
	grpc.ClientStream
}

type greetServiceSayHiClientsStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiClientsStreamingClient) Send(m *StreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayHiClientsStreamingClient) CloseAndRecv() (*MessagesList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessagesList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayHiBidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiBidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet_service.GreetService/SayHiBidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiBidirectionalStreamingClient{stream}
	return x, nil
}

type GreetService_SayHiBidirectionalStreamingClient interface {
	Send(*StreamingRequest) error
	Recv() (*HiResponse, error)
	grpc.ClientStream
}

type greetServiceSayHiBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiBidirectionalStreamingClient) Send(m *StreamingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayHiBidirectionalStreamingClient) Recv() (*HiResponse, error) {
	m := new(HiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	// Unary i.e simple request-response
	SayHi(context.Context, *NoParams) (*HiResponse, error)
	// ServerStreaming
	SayHiServerStreaming(*DonutsList, GreetService_SayHiServerStreamingServer) error
	// ClientStreaming
	SayHiClientsStreaming(GreetService_SayHiClientsStreamingServer) error
	// BidirectionalStreaming
	SayHiBidirectionalStreaming(GreetService_SayHiBidirectionalStreamingServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) SayHi(context.Context, *NoParams) (*HiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedGreetServiceServer) SayHiServerStreaming(*DonutsList, GreetService_SayHiServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiServerStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayHiClientsStreaming(GreetService_SayHiClientsStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiClientsStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayHiBidirectionalStreaming(GreetService_SayHiBidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiBidirectionalStreaming not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.GreetService/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SayHi(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_SayHiServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DonutsList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).SayHiServerStreaming(m, &greetServiceSayHiServerStreamingServer{stream})
}

type GreetService_SayHiServerStreamingServer interface {
	Send(*HiResponse) error
	grpc.ServerStream
}

type greetServiceSayHiServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiServerStreamingServer) Send(m *HiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_SayHiClientsStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayHiClientsStreaming(&greetServiceSayHiClientsStreamingServer{stream})
}

type GreetService_SayHiClientsStreamingServer interface {
	SendAndClose(*MessagesList) error
	Recv() (*StreamingRequest, error)
	grpc.ServerStream
}

type greetServiceSayHiClientsStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiClientsStreamingServer) SendAndClose(m *MessagesList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayHiClientsStreamingServer) Recv() (*StreamingRequest, error) {
	m := new(StreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_SayHiBidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayHiBidirectionalStreaming(&greetServiceSayHiBidirectionalStreamingServer{stream})
}

type GreetService_SayHiBidirectionalStreamingServer interface {
	Send(*HiResponse) error
	Recv() (*StreamingRequest, error)
	grpc.ServerStream
}

type greetServiceSayHiBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiBidirectionalStreamingServer) Send(m *HiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayHiBidirectionalStreamingServer) Recv() (*StreamingRequest, error) {
	m := new(StreamingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _GreetService_SayHi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHiServerStreaming",
			Handler:       _GreetService_SayHiServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHiClientsStreaming",
			Handler:       _GreetService_SayHiClientsStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHiBidirectionalStreaming",
			Handler:       _GreetService_SayHiBidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
