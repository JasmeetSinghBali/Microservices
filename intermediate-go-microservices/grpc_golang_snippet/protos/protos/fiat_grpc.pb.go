// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: fiat.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiatClient is the client API for Fiat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiatClient interface {
	GetRate(ctx context.Context, in *FiatRateRequest, opts ...grpc.CallOption) (*FiatRateResponse, error)
}

type fiatClient struct {
	cc grpc.ClientConnInterface
}

func NewFiatClient(cc grpc.ClientConnInterface) FiatClient {
	return &fiatClient{cc}
}

func (c *fiatClient) GetRate(ctx context.Context, in *FiatRateRequest, opts ...grpc.CallOption) (*FiatRateResponse, error) {
	out := new(FiatRateResponse)
	err := c.cc.Invoke(ctx, "/Fiat/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiatServer is the server API for Fiat service.
// All implementations must embed UnimplementedFiatServer
// for forward compatibility
type FiatServer interface {
	GetRate(context.Context, *FiatRateRequest) (*FiatRateResponse, error)
	mustEmbedUnimplementedFiatServer()
}

// UnimplementedFiatServer must be embedded to have forward compatible implementations.
type UnimplementedFiatServer struct {
}

func (UnimplementedFiatServer) GetRate(context.Context, *FiatRateRequest) (*FiatRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedFiatServer) mustEmbedUnimplementedFiatServer() {}

// UnsafeFiatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiatServer will
// result in compilation errors.
type UnsafeFiatServer interface {
	mustEmbedUnimplementedFiatServer()
}

func RegisterFiatServer(s grpc.ServiceRegistrar, srv FiatServer) {
	s.RegisterService(&Fiat_ServiceDesc, srv)
}

func _Fiat_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiatRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fiat/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).GetRate(ctx, req.(*FiatRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fiat_ServiceDesc is the grpc.ServiceDesc for Fiat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fiat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Fiat",
	HandlerType: (*FiatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _Fiat_GetRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fiat.proto",
}
